#coding=utf-8
from math import sqrt, acos, pi
from decimal import Decimal, getcontext

getcontext().prec = 30

class Vector(object):

    CANNOT_NORMALIZE_ZERO_VECTOR_MSG = 'Cannot normalize the zero vector'

    def __init__(self, coordinates):
        try:
            if not coordinates:
                raise ValueError
            self.coordinates = tuple([Decimal(x) for x in coordinates])
            self.dimension = len(coordinates)
#            print self.coordinates

        except ValueError:
            raise ValueError('The coordinates must be nonempty')

        except TypeError:
            raise TypeError('The coordinates must be an iterable')


    def __str__(self):
        return 'Vector: {}'.format(self.coordinates)


    def __eq__(self, v):
        return self.coordinates == v.coordinates

    def plus(self,v):
        new_coordinates = [x+y for x,y in zip(self.coordinates,v.coordinates)]
        return Vector(new_coordinates)  
          
    def minus(self,v):
        new_coordinates = [x-y for x,y in zip(self.coordinates,v.coordinates)]
        return Vector(new_coordinates)

    def time_scalar(self,C):
        new_coordinates = [Decimal(C)*x for x in self.coordinates]
        return Vector(new_coordinates)

    #计算向量大小
    def magnitude(self):
        coordinates_squared = [x**2 for x in self.coordinates]
        return sum(coordinates_squared).sqrt()
    #    return Decimal(sqrt(sum(coordinates_squared))),原代码是这样，
    #    但是运行后会报错（math domain error），此处的开放函数为decimal类的自带开方函数，https://discussions.youdaxue.com/t/2-8/46479

    def normalized(self):
        try:
            magnitude = self.magnitude()
            return self.time_scalar(Decimal('1.0')/magnitude)
        except ZeroDivisionError:
            raise Exception('Cannot normalize the zero vector')

    def dot(self,v):
        return sum([x*y for x,y in zip(self.coordinates,v.coordinates)])

    #计算向量夹角大小
    def angle_with(self,v,in_degrees=False):
        try:
            u1 = self.normalized()
            u2 = v.normalized()
            angle_in_radians = acos(u1.dot(u2))

            if in_degrees:
                degrees_per_radian = 180. / pi
                return angle_in_radians * degrees_per_radian
            else:
                return angle_in_radians
        except Exception as e:
            if str(e) == self.CANNOT_NORMALIZE_ZERO_VECTOR_MSG:
                raise Exception('Cannot compute an angle with the zero vector')
            else:
                raise e


    #判断是正交向量，判断两个向量的点积是否为0,如果点积为0则一定是正交向量（如果至少其中一个是0向量，则即时0向量，也是正交向量）
    def is_orthogonal_to(self,v,tolerance=1e-10):
        return abs(self.dot(v))<tolerance

    #判断是否为平行向量
    def is_parallel_to(self,v):
        return (self.is_zero() or 
            v.is_zero() or 
            self.angle_with(v) == 0 or 
            self.angle_with(v) == pi)
    #判断是否为0向量
    def is_zero(self,tolerance=1e-10):
        return self.magnitude()<tolerance

v1 = Vector([-7.579, -7.88])
w1 = Vector([22.737, 23.64])
print v1.is_parallel_to(w1)
print v1.is_orthogonal_to(w1)

v2 = Vector([-2.029, 9.97, 4.172])
w2 = Vector([-9.231, -6.639, -7.245])
print v2.is_parallel_to(w2)
print v2.is_orthogonal_to(w2)

v3 = Vector([-2.328, -7.284, -1.214])
w3 = Vector([-1.821, 1.072, -2.94])
print v3.is_parallel_to(w3)
print v3.is_orthogonal_to(w3)

v4 = Vector([2.118, 4.827])
w4 = Vector([0, 0])
print v4.is_parallel_to(w4)
print v4.is_orthogonal_to(w4)
